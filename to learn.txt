to learn
{

	glibc

	cast int64 to short what exactly do . consider that dynamic cast is not allowed in c

	شکن نصب کن for copilot

	آیا ترد های ما را روی کور های خالی می اندازد اگر داشته باشد

	ps . psfax
	
	map reduce in architucture
	
	lsof

	linux

	bgp.tools ?
	
	how to close ipv6
	
	Livelock

	vectorization techniques for performance

	scattering cpu affinity

	from dr.akbari https://refactoring.guru/

	TUI (text user interface)
	lib TUI check

	If you don’t want to code all in C, you can make your C app output data and pipe it to:

	art of monitoring

	از نظر نوع و تکنیک، حملات “UDP NULL” با سهم ۵۹.۵۳٪ غالب هستند. پس از آن “DNS Amplification” با حدود ۱۵٪ و “TCP Malformed” با ۱۴٪ در جایگاه‌های بعدی قرار دارند. حملاتی با تکنیک‌هایی نظیر ACK Flood، حمله ترکیبی بر‌اساس DNS، و سایر روش‌ها نیز به ترتیب مطرح هستند. این تنوع روش‌ها نشان می‌دهد که مهاجمان تلاش داشته‌اند از انواع مختلفی از حملات برای ایجاد اختلال استفاده کنند.


	hazard pointer

	hazard structure

	atomic variable

	synchronize 

	hyper thread

	lockless algorithm

	redis as in memory database

	psfax
	
	

}

lock and mutex and thread
{

Good — you’ve hit the core of **POSIX threading synchronization**. To “master” this area, you want to understand a few major concepts, primitives, and design patterns. I’ll organize this into **headlines/titles** (things you can study), and then a short note for each:

---

## 🔑 Core Synchronization Primitives (POSIX Threads)

1. **Mutexes (`pthread_mutex_t`)**

   * Mutual exclusion locks: ensure only one thread enters a critical section at a time.
   * Types: normal, recursive, error-checking.

2. **Condition Variables (`pthread_cond_t`)**

   * Work with a mutex to allow threads to wait for conditions.
   * Functions: `pthread_cond_wait`, `pthread_cond_signal`, `pthread_cond_broadcast`.
   * Key feature: atomic “wait-unlock-sleep” operation.

3. **Semaphores (`sem_t`)**

   * Counting resources (binary semaphore is like a mutex).
   * Often simpler for producer/consumer models.

4. **Read–Write Locks (`pthread_rwlock_t`)**

   * Allow multiple readers or one writer.

5. **Barriers (`pthread_barrier_t`)**

   * Synchronize phases of execution (all threads reach a barrier before continuing).

---

## ⚙️ Important Concepts

6. **Critical Sections**

   * Regions of code where shared state is accessed.

7. **Race Conditions**

   * When correctness depends on unpredictable timing.

8. **Deadlock**

   * Two (or more) threads wait forever for each other’s locks.

9. **Starvation / Fairness**

   * When a thread never gets the resource it needs because others keep acquiring it.

10. **Spurious Wakeups**

    * Condition variables may return without a signal → always use `while(...)` not `if(...)`.

11. **Lost Wakeups**

    * Why `pthread_cond_wait` must atomically release-lock-and-sleep (to avoid missing a signal).

---

## 🧩 Common Synchronization Patterns

12. **Producer–Consumer Queue**

* Uses mutex + condition variables (like your circular buffer).

13. **Readers–Writers Problem**

* Optimizing access when reads are common and writes are rare.

14. **Dining Philosophers**

* Classic deadlock/starvation example.

15. **Thread-safe Initialization (Once)**

* `pthread_once` for one-time initialization across threads.

16. **Double-checked Locking**

* Optimization pattern (must be careful with memory ordering).

---

## 🧠 Deeper Topics (Advanced)

17. **Memory Visibility & Ordering**

* Mutexes also act as memory fences/barriers.

18. **Futex (Fast Userspace Mutex, Linux)**

* Lower-level primitive behind pthreads.

19. **Lock-free / Wait-free Data Structures**

* Using atomics instead of locks.

20. **Real-time Scheduling & Priority Inversion**

* Priority inheritance with mutexes.

---

## 📚 Good References

* **Books**:

  * *Programming with POSIX Threads* — David R. Butenhof (classic).
  * *The Linux Programming Interface* — Michael Kerrisk (great for system-level).
  * *Operating Systems: Three Easy Pieces* — Remzi Arpaci-Dusseau (free online).

* **Manual Pages**:

  * `man pthreads`, `man pthread_mutex_lock`, `man pthread_cond_wait`.

---

👉 If you focus on **mutex + condition variables + producer/consumer pattern** first, you’ll already cover \~80% of practical multithreading in C. The rest builds from there.

Do you want me to prepare a **learning roadmap** (step-by-step exercises with mutex/cond/sem) so you can practice and cement these concepts in C?


}


questions:
{

	-----------

	in iPerf command By default, iPerf uses 1470 bytes for UDP payload (to avoid fragmentation over Ethernet with a standard 1500-byte MTU).

	fragmentation over Ethernet 

	یعنی چی

	--------

	در زبان c exceptio نداریم ولی سیگنال داریم. حالا چجوری کار میکنه

	--------

	سوال . udp انصالش چجوری است آیا یک سوکت درست می کنیم و ارسال م یکنیم اینها با هم ارتباطی ندارند.

	آیا میشه در سطح لایه های شبکه کد نویسی کرد یعنی کرنل را دور زد

	سوکت باز می کنیم از کدام لایه شبکه شروع می کند استفاده کردن در ویندوز و لینوکس

	یک توضیحی که یک سوکت باز کردن و مراحل آن روی عملکرد لایه های چگونه انجام می شود

}


ideas
{
	
	red button to cancel all operation

	load prev settings

	echo current using setting

	testebility

	nullable

	empty argument

	crc changes

	check struct with just one nested struct has sizeof() inner struct only not more

	donot make fragment memory allocation

	---------

	to serach/Reasearch:

	RTT 70 mili second yani chi
	google analytics


	gdb version
	cmake  
	what s gcc and difference to g++
	powershell
	CLang


	SOLID principles
	Build systems & dependency management (e.g., Maven, Gradle, CMake)
	IntelliJ
	CI/CD systems


	🔧 9. Diagnostics and Monitoring Tools
	Tools: , traceroute, netstat, wireshark, nslookup, dig, nmap, curl

	Why: Troubleshooting and verifying connectivity are core skills.


	🔄 10. Reverse Proxies and Load Balancers
	Concepts: Nginx, HAProxy, Layer 4 vs Layer 7 balancing

	Why: Needed for scaling, SSL termination, and request routing in web apps.

	Concepts: SNAT, DNAT, PAT, port mapping

	DNS resolution failure

	Port conflicts

	Firewall blocking

	NAT loopback issues

	MTU mismatch or packet fragmentation

	Rate limiting and throttling

	Network Performance Issues


	Issue	Description

	Latency	Time delay between sender and receiver

	Packet Loss	Packets get lost due to overload, interference, or bad routing
	Bandwidth Saturation	Network link is constantly used to max capacity
	Bufferbloat	Excessive buffering causes delay (common in routers)

	Every network device (routers, switches, NICs, OS sockets) uses buffers.

	در خصوص عینک موضوع blucut و bluecontrol تحقیق شود گویا بلو کنترل بهتر عمل می کند

}
